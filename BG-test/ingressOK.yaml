apiVersion: v1
kind: Pod
metadata:
  annotations:
    prometheus.io/port: "9113"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
  creationTimestamp: "2021-10-25T14:36:20Z"
  generateName: ingress-nginx-ingress-5dbdc697bf-
  labels:
    app: ingress-nginx-ingress
    pod-template-hash: 5dbdc697bf
  name: ingress-nginx-ingress-5dbdc697bf-2tzh2
  namespace: nginx-ingress
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: ingress-nginx-ingress-5dbdc697bf
    uid: e5f499de-5f34-4e5d-87a1-9361a8be4807
  resourceVersion: "226738"
  uid: b8722e5f-ba26-4af9-b45a-8257e562d55f
spec:
  containers:
  - args:
    - -nginx-plus=false
    - -nginx-reload-timeout=60000
    - -enable-app-protect=false
    - -nginx-configmaps=$(POD_NAMESPACE)/ingress-nginx-ingress
    - -default-server-tls-secret=$(POD_NAMESPACE)/ingress-nginx-ingress-default-server-tls
    - -ingress-class=nginx
    - -health-status=false
    - -health-status-uri=/nginx-health
    - -nginx-debug=false
    - -v=1
    - -nginx-status=true
    - -nginx-status-port=8080
    - -nginx-status-allow-cidrs=127.0.0.1
    - -report-ingress-status
    - -external-service=ingress-nginx-ingress
    - -enable-leader-election=true
    - -leader-election-lock-name=ingress-nginx-ingress-leader-election
    - -enable-prometheus-metrics=true
    - -prometheus-metrics-listen-port=9113
    - -prometheus-tls-secret=
    - -enable-custom-resources=true
    - -enable-tls-passthrough=false
    - -enable-snippets=false
    - -enable-preview-policies=false
    - -ready-status=true
    - -ready-status-port=8081
    - -enable-latency-metrics=false
    env:
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: nginx/nginx-ingress:2.0.2
    imagePullPolicy: IfNotPresent
    name: ingress-nginx-ingress
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    - containerPort: 443
      name: https
      protocol: TCP
    - containerPort: 9113
      name: prometheus
      protocol: TCP
    - containerPort: 8081
      name: readiness-port
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /nginx-ready
        port: readiness-port
        scheme: HTTP
      periodSeconds: 1
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        add:
        - NET_BIND_SERVICE
        drop:
        - ALL
      runAsUser: 101
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-bqtn4
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: k8s-node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: ingress-nginx-ingress
  serviceAccountName: ingress-nginx-ingress
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-bqtn4
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2021-10-25T14:36:00Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2021-10-25T14:36:19Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2021-10-25T14:36:19Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2021-10-25T14:36:20Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://6e2b2538ee925f15f3a604684bfa1574df585fcd6ca0295a46869825f6aedf97
    image: nginx/nginx-ingress:2.0.2
    imageID: docker-pullable://nginx/nginx-ingress@sha256:29e1a6c5158e270bd79580476b15099fc6e5a4c0b9303db19c8e92879d79dd5f
    lastState: {}
    name: ingress-nginx-ingress
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2021-10-25T14:36:18Z"
  hostIP: 192.168.0.111
  phase: Running
  podIP: 10.32.0.2
  podIPs:
  - ip: 10.32.0.2
  qosClass: BestEffort
  startTime: "2021-10-25T14:36:00Z"
